Глава 5 - Детальные сведения о конфигурации Spring

Редактор свойств для компонентов JavaBean
com.kraynov.ch5.propeditors.*
  Так как изрядная часть значений свойств в Spring-приложении задается в файле конфигурации BeanFactory (?), в сущности,
  эти свойства являются строками. Поэтому платформа спринг позволяет определить редакторы свойств, которые будут управлять
  преобразованием значений String в подходящие типы (при инжекте этих свойств в бин). Другими словами, разработчик может
  прописывать в файле конфигурации строковые значения, а специальные классы - редактооы свойств - будут трансформировать
  эти строки в объекты, такие как Locale, Pattern, Date и тд.
  В Spring 3.1 доступно 13 встроенных реализаций PropertyEditor (стандартный интерфейс, который преобразует значения
  свойства в/из внутреннего представления типа String). Класс com.kraynov.ch5.propeditors.PropertyEditorBean содержит 13 свойств, по
  одному на каждый тип. Конфигурация для этого класса содержится в файле builtin.xml: по умолчанию CustomDateEditor и
  StringTrimmerEditor не зарегистрированы в Spring, поэтому для них мы вручную прописываем регистрацию.
 Создание специального редактора свойств
  Иногда возникает потребность в создании собственного редактора свойств. PropertyEditor содержит большое количество
  методов, которые нужно реализовать. JDK5+ предлагает решить эту проблему путем расширения класса PropertyEditorSupport,
  который оставляет за нами реализацию только одного метода setAsText().
  Примером реализации кастомного редактора свойств является класс com.kraynov.ch5.propeditors.NamePropertyEditor, который преобразует
  строку с разделителем-пробелом в имя и фамилию для класса com.kraynov.ch5.propeditors.Name. Чтобы использовать кастомный редактор
  свойств, нужно зарегистрировать его в ApplicationContext. Конфигурация приведена в custom.xml.
  Регистрация редактора свойст осуществляется путем установки свойства customEditors для бина, который является инстансом
  класса org.springframework.beans.factory.config.CustomEditorConfigurer (имя бина неважно).

Дополнительные сведения о конфигурации ApplicationContext
  Помимо функций, определенных в BeanFactory, класс ApplicationonContext предлагает и другую функциональность. Самым
  главным преимуществом является возможность конфигурировать и управлять ресурсами полностью декларативным путем. Другими
  полезными функциями являются:
       интернационализация;
       публикация событий;
       управление и доступ к ресурсам;
       доп. интерфесы жизненного цикла;
       улучшенное автоматическое конфигурирование компонент инфраструктуры.

 Интернационализация с помощью интерфейса MessageSource
  Используя интерфейс org.springframework.context.MessageSource приложение может получить доступ к строковым ресурсам,
  называемым сообщениями, которые сохранены для множества разных языков. Чтобы получить поддержку MessageSource,
  предлагаемую ApplicationContext, в конфигурации понадобится определить бин типа MessageSource с именем messageSource.
  Простейший пример использования приведен в классе MessageSourceDemo.
  События приложений
  ApplicationContext можно использовать в качестве брокера сообщений. Событие это класс, производный от ApplicationEvent,
  который сам является производным от java.util.EventObject. Любой бин может прослушивать события, реализовав интерфейс
  ApplicationListener<T>, причем его не нужно регистрировать в ApplicationContext, это делается аматоматически.

 Доступ к ресурсам - com.kraynov.ch5.event.*
  Spring предоставляет унифицированный механизм для доступа к разного рода ресурсам независимо от протокола доступа.

 Events - поправить

  Пояснение примера: клиент получает ссылку на бин publisher и посылает запрос на публикацию сообщения. Publisher
  реализует интерфейс ApplicationContextAware, поэтому имеет ссылку на экземпляр ApplicationContext. Ему и делегируется
  запрос на публикацию конкретного ApplicationEvent. ApplicationContext имеет доступ к зарегистрированным листенерам. По
  типу ApplicationEvent он определяет листенеры, которые должны отреагировать на публикацию.