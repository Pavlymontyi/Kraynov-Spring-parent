Глава 6 в версии Spring 4 - Поддержка JDBC в Spring

 Модель данных для кода примеров
  Модель включает простую базу данных контактов с двумя таблицами. Первая из них, таблица CONTACT, хранит информацию о
  контактной персоне, а вторая, таблица CONTACT TEL DETAIL, содержит подробности о телефонах этой персоны.
  Во второй таблице есть внешний ключ на первую таблицу, т.о. между таблицами отношение один-ко-многим.

 Инфраструктура JDBC в Spring
  Для управления подключением к базе данных можно использовать платформу Spring, определив бин, который реализует
  интерфейс javax.sql.DataSource. Внутри DataSource предоставляет и управляет набором реализаций Connection.

  Простейшей реализацией DataSource в spring является DriverManagerDataSource, но так как он не поддерживает даже пул
  соединений (тупо получает от драйвера Connection), то класс подходит только для тестовых целей. (эта реализация
  используется в конфигурации datasource-drivermanager.xml).
  В реальных приложениях можно использовать другую реализацию org.apache.commons.dbcp.BasicDataSource, либо использовать
  реализацию, предоставляемую сервером приложений JEE(например,JBoss, WebSphere, Weblogic или GlassFish), который может
  дополнительно увеличить производительность приложения.
  Другой способ конфигурирования бина dataSource предусматривает использование JNDI. Если разрабатываемое приложение
  должно выполняться в контейнере JEE, можно извлечь преимущества от пула подключений, управляемого контейнером.

  Поддержка встроенной базы данных
  <beans ...
         xmlns:jdbc="http://www.springframework.org/schema/jdbc"
           xsi:schemaLocation="http://www.springframework.org/schema/jdbc
                               http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <jdbc:embedded-database id="dataSource" type="H2">
        <jdbc:script location="classpath:META-INF/sql/schema.sql"/>
        <jdbc:script location="classpath:META-INF/sql/test-data.sql"/>
    </jdbc:embedded-database>

  Обработка исключений
  Поскольку в Spring рекомендуется использовать исключения времени выполнения,а не проверяемые исключения, необходим
  механизм трансляции проверяемого исключения SQLException в исключение времени выполнения Spring JDBC.
  Платформа Spring предоставляет стандартную реализацию интерфейса SQLExceptionTranslator, которая берет на себя
  обязанности по трансляции обобщенных кодов ошибок SQL в исключения Spring JDBC. Можно унаследоваться от нее в случае,
  если нужно переопределить его поведение:
    public class KraynovSQLErrorCodesTranslator extends SQLErrorCodeSQLExceptionTranslator {

  Класс JdbcTemplate
  Этот класс представляет ядро поддержки JDBC в Spring. Он способен выполнять все типы SQL-операторов: DDL, DML, select
  и тд. Класс JdbcTemplate позволяет отправлять базе данных SQL-oпepaтop любого типа и возвращать результат также любого
  типа.
  Note: В Sрriпg-модуле Jdbc имеется класс по имени JdbcDaoSupport. Он является оболочкой для класса JdbcTemplate и
  классы DAO могут расширять класс JdbcDaoSupport. В этом случае после внедрения такого класса DAO с источником данных
  экземпляр JdbcTemplate будет инициализирован автоматически.
  Пример использования экземпляра JdbcTemplate:
        jdbcTemplate.queryForObject("select first_name from contact where id = ?", new Object[]{id}, String.class);
  Параметры передаются через массив Object, причем порядок следования параметров должен совпадать с порядком следования
  знаков ? в теле sql-запроса. Можно использовать именованные параметры. Соответствующую поддержку в Spring обеспечивает
  разновидность класса JdbcTemplate по имени NamedParameterJdbcTemplate.
  Пример использования:
        String sql = "select last_name from contact where id = :contactld";
        Map<String, Object> namedParameters = new HashMap<String, Object>();
        namedParameters.put("contactld", id);
        return namedJdbcTemplate.queryForObject(sql, namedParameters, String.class);

  Извлечение объектов предметной области с помощью RowМapper<T>
  Унаследовав класс RowMapper и реализовав метод mapRow, можно использовать полученный класс для трансформации результатов
  запроса из объекта ResultSet в pojo-объекты предметной области.
         private static final class ContactMapper implements RowMapper<Contact>{
            @Override
            public Contact mapRow(ResultSet rs, int rowNum) throws SQLException {
                Contact contact = new Contact();
                contact.setId(rs.getLong("id"));
                ...
                return contact;
            }
         }

  Затем передавать экзмпляр этого класса метод query объекта JdbcTemplate:
    namedParameterJdЬcTemplate.query(sql, new ContactMapper());

  Начиная с java8, можно даже не реализовывать класс, а использовать лямбда-выражение.
    namedJdbcTemplate.query(sql, (rs, rowNum) -> {
                ...
            });

  Извлечение вложенных объектов предметной области с помощью ResultSetExtractor
  Интерфейс RowMapper<T> подходит только для отображения строки на одиночный объект предметной области. Для более сложной
  объектной структуры должен использоваться интерфейс ResultSetExtractor. Аналогично RowMapper.
        public interface ResultSetExtractor<T> {
            T extractData(ResultSet var1) throws SQLException, DataAccessException;
        }

  Классы Spring, моделирующие операции JDBC
  MappingSqlQuery<T>. Класс MappingSglQuery<T> позволяет поместить и строку запроса и метод mapRow() в объект единого класса
  SqlUpdate. Класс SglUpdate позволяет поместить внутрь себя любой SQL oпepaтop обновления. Он также предоставляет множество
  полезных функций для привязки SQL-параметров, извлечения сгенерированного СУРБД ключа после вставки новой записи и т.д.
  SqlFunction<T>. Класс SqlFunction<T> позволяет вызывать хранимые функции в базе данных с арrументами и возвращаемым типом.
  Существует еще один класс, StoredProcedure, который помогает вызывать хранимые процедуры.
  BatchSqlUpdate - Для пакетных операций используется класс BatchSqlUpdate.

  Настройка DАО-классов JDBC с использованием аннотаций
  DAO-класс снабжается аннотацией @Repository для объявления бина Spring по имени contactDao, и поскольку класс содержит код
  доступа к данным, @Repository также инструктирует Spring о необходимости транслировать исключения SQL, специфичные для
  базы данных, в более дружественную к приложению иерархию DataAccessException, поддерживаемую платформой. К свойству
  dataSource применяется аннотация @Resource стандарта JSR-250.

  @Repository("contactDao")
  public class JdbcContactDAO implements ContactDAO {
      private DataSource dataSource;
      @Resource(name="dataSource")
      public void setDataSource(DataSource dataSource) {
          this.dataSource = dataSource;
      }
  }

