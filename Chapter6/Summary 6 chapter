Глава 6 (глава 5 в версии Spring 4) - Введение в аспектно-ориентированное программирование с использованием Spring

    Аспектно-ориентированное программивароние (АОП, AOP) - некая парадигма, в основе которой лежит идея максимально
    разделить код. На АОП часто ссылаются как на инструмент сквозной функциональности, нечто похожее на пробрасывание
    Exception. Типичными примерами сквозной функциональности является логирование. Важно понимать, что АОП дополняет ООП
    и помогает решить задачи определенных классов, которые плохо решаются в рамках ООП.

 Концепции АОП

   Термины:
    Точки соединения (joinpoint) - точка во время выполнения программы: обращение к методу, вызов метода, инициализация
    класса, создание экземпляра.
    Советы (advice) - фрагмент кода, который может выполниться. Совет может быть выполнен до, после или вместо точки
    соединения.
    Срезы (англ. pointcut) — набор точек соединения. Срез определяет, подходит ли данная точка соединения к данному совету.
    Аспект (англ. aspect) — комбинация совета и срезов, инкапсулированных в классе.
    Аспект это Модуль или класс, реализующий сквозную функциональность. Аспект изменяет поведение остального кода, п
    рименяя совет в точках соединения, определённых некоторым срезом.
        aspect VisitAspect {
          void Point.acceptVisitor(Visitor v) {
            v.visit(this);
          }
        }

    Связывание (weaving) - процесс вставки аспектов в точки соединения. Существует три типа - во время компиляции и
    сборки, во время выполнения, либо во время загрузки (load-time weaving - LTW), при котором перехватывается
    лежащий в основе загрузчик классов JVM и обеспечивает связывание с байт-кодом, когда он загружается загрузчиком.

 Типы АОП
   Различают два типа АОП: статическое и динамическое.
   При статическомм АОП процесс связывания формирует еще один шаг внутри процесса сборки приложения. Т.е.
   предусматривается модификация действительного байткода приложения. Конечным результатом является просто байткод.
   Для добавления функциональности к цели придется пересобирать все приложение. Реализация - AspectJ.
   AspectJ - аспектно-ориентированное расширение языка Java.

   Динамические реализции АОП (в Spring именно динамическая реализация) напротив производят связывание в рантайме. В
   Spring это достигается путем создания Proxy. Недостатком является производительность. Преимущество - не надо
   пересобирать приложение.

 Архитектура АОП в Spring
   Основана на прокси. При снабжении советом экземпляр класса, движок создает прокси-объект (а для него генерит класс).
   Этому объекту затем и направляются все вызовы. При получении вызова, он анализирует текущие условия (срез) и
   свзяывает подходящий совет. Внутренее Spring поддерживает две реализации прокси: динамический прокси JDK и прокси
   CGLIB. Первая изпользуется по умолчанию, если целевой объект реализует интерфейс. В противном случае CGLIB.
   В Spring поддерживается только один тип точек соединения - Method Invocation.
   Аспект в Spring это класс, реализующий интерфейс Advisor. Существуют несколько готовых реализаций. Можно создать свою.
   Подчиненный интерфейс - PointcutAdvisor. Стандартная реализация - DefaultPointcutAdvisor - конфигурирует со срезом,
   который по умолчанию включает все методы.

 Прокси АОП в Spring
   Класс ProxyFactory управляет процессом связывания и создания прокси в Spring. Под капотом имеет место цепочка делегирования:
   ProxyFactory -> DefaultAopProxyFactory -> JdkDynamicAopProxy/Cglib2AopProxy.
   Платформа Spring поддерживает 6 типов советов, для каждого из них свой интерфейс:
        Перед               before              org.springframework.aop.MethodBeforeAdvice
        После возврата      after returning     org.springframework.aop.AfterReturningAdvice
        После               after finally       org.springframework.aop.AfterAdvice
        Вместо              around              org.aopalliance.intercept.MethodInterceptor
        Перехват            throws              org.springframework.aop.ThrowAdvice
        Введение            introduction        org.springframework.aop.IntroductionInterceptor


 Совет before - имеет полный доступ к цели Method Invocation, может менять аргументы, переданные методу, но не имеет
  контроля выполнения самого метода, как и возвращаемого значения. Сигнатура:
         public void before(Method method, Object[] objects, Object o) throws Throwable {

 Совет after returning - имеет доступ к цели Method Invocation, аргументам, а также к возвращаемому значению.
  Изменять аргументы не может, контроля выполнения метода не имеет; изменять возврщаемое значение также не может, но
  может бросить исключение, которое будет передано наверх.
  Если целевой метод генерирует исключение, то совет не выполняется. Сигнатура:
         public void afterReturning(Object returnValue, Method method, Object[] args, Object target) throws Throwable {

 Совет around - имеет

 Использование АОП в Spring


